import streamlit as st
import pandas as pd
import plotly.graph_objects as go

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–î–∏–∞–≥—Ä–∞–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏–ª–µ–π SJR",
    layout="wide",
    initial_sidebar_state="collapsed"
)
#st.title("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏–ª–µ–π SJR (2022‚Äì2024)")
st.markdown("<h1 style='text-align: center;'>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏–ª–µ–π SJR (2022‚Äì2024)</h1>", unsafe_allow_html=True)


# –£–±–∏—Ä–∞–µ–º Streamlit-–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω, –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å)
# st.title("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏–ª–µ–π SJR (2022‚Äì2024)")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df_2022 = pd.read_csv('2022.csv', sep=';', usecols=['Sourceid', 'SJR Best Quartile']).assign(Year=2022)
df_2023 = pd.read_csv('2023.csv', sep=';', usecols=['Sourceid', 'SJR Best Quartile']).assign(Year=2023)
df_2024 = pd.read_csv('2024.csv', sep=';', usecols=['Sourceid', 'SJR Best Quartile']).assign(Year=2024)

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
for df in [df_2022, df_2023, df_2024]:
    df.rename(columns={'Sourceid': 'Journal ID', 'SJR Best Quartile': 'Quartile'}, inplace=True)

df = pd.concat([df_2022, df_2023, df_2024], ignore_index=True)
df = df.drop_duplicates(['Journal ID', 'Year'])
df['Quartile'] = df['Quartile'].str.upper().str.replace(' ', '')

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
years = [2022, 2023, 2024]
quartiles = ['Q1', 'Q2', 'Q3', 'Q4']

quartile_colors = {
    'Q1': 'rgba(100, 180, 80, 0.8)',
    'Q2': 'rgba(230, 200, 0, 0.8)',
    'Q3': 'rgba(250, 140, 0, 0.8)',
    'Q4': 'rgba(220, 60, 50, 0.8)',
    '–ë–µ–∑ –∫–≤–∞—Ä—Ç–∏–ª—è': 'rgba(80, 130, 200, 0.8)'
}

# –£–∑–ª—ã
quartile_nodes = [f"{year} {q}" for year in years for q in quartiles]
no_quartile_nodes = [f"{year} –ë–µ–∑ –∫–≤–∞—Ä—Ç–∏–ª—è" for year in years]
all_nodes = quartile_nodes + no_quartile_nodes
node_indices = {node: idx for idx, node in enumerate(all_nodes)}

# –¶–≤–µ—Ç–∞ —É–∑–ª–æ–≤
node_colors = []
for node in all_nodes:
    q = node.split(' ', 1)[1]
    node_colors.append(quartile_colors.get(q, "rgba(150, 150, 150, 0.6)"))

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∑–ª–æ–≤ (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º!)
node_y = []
node_x = []
for node in all_nodes:
    year_str = node.split()[0]
    if year_str == "2022":
        node_x.append(0.15)
    elif year_str == "2023":
        node_x.append(0.5)
    elif year_str == "2024":
        node_x.append(0.85)

    if "–ë–µ–∑ –∫–≤–∞—Ä—Ç–∏–ª—è" in node:
        node_y.append(1.08)
    elif "Q1" in node:
        node_y.append(0.15)
    elif "Q2" in node:
        node_y.append(0.3)
    elif "Q3" in node:
        node_y.append(0.5)
    elif "Q4" in node:
        node_y.append(0.83)

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–≤—è–∑–µ–π
sankey_links = {'source': [], 'target': [], 'value': [], 'color': []}
journals_2022 = set(df_2022['Journal ID'])
journals_2023 = set(df_2023['Journal ID'])
journals_2024 = set(df_2024['Journal ID'])
all_journal_ids = journals_2022.union(journals_2023).union(journals_2024)

for journal_id in all_journal_ids:
    journal_by_year = {}
    for year, year_df in zip(years, [df_2022, df_2023, df_2024]):
        journal_data = year_df[year_df['Journal ID'] == journal_id]
        if not journal_data.empty:
            quartile = journal_data['Quartile'].iloc[0]
            journal_by_year[year] = quartile if quartile in quartiles else '–ë–µ–∑ –∫–≤–∞—Ä—Ç–∏–ª—è'

    for i in range(len(years) - 1):
        y1 = years[i]
        y2 = years[i + 1]

        q1 = journal_by_year.get(y1)
        q2 = journal_by_year.get(y2)

        if not q1:
            continue

        source = f"{y1} {q1}"
        target = f"{y2} {q2 if q2 else '–ë–µ–∑ –∫–≤–∞—Ä—Ç–∏–ª—è'}"
        color = quartile_colors.get(q1, quartile_colors['–ë–µ–∑ –∫–≤–∞—Ä—Ç–∏–ª—è'])

        sankey_links['source'].append(node_indices[source])
        sankey_links['target'].append(node_indices[target])
        sankey_links['value'].append(1)
        sankey_links['color'].append(color)

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
links_df = pd.DataFrame(sankey_links)
links_df = links_df.groupby(['source', 'target', 'color']).agg({'value': 'sum'}).reset_index()
links_df = links_df.sort_values('value', ascending=False)

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π Sankey-–¥–∏–∞–≥—Ä–∞–º–º—ã
fig = go.Figure(go.Sankey(
    arrangement="fixed",
    node=dict(
        pad=25,
        thickness=20,
        line=dict(color="black", width=0.5),
        label=all_nodes,
        color=node_colors,
        x=node_x,
        y=node_y
    ),
    link=dict(
        source=links_df['source'],
        target=links_df['target'],
        value=links_df['value'],
        color=links_df['color'],
        hovertemplate='%{source.label} ‚Üí %{target.label}<br>–ñ—É—Ä–Ω–∞–ª–æ–≤: %{value:.0f}<extra></extra>'
    )
))

fig.update_layout(
    height=900,
      width=1800,
    plot_bgcolor='rgba(250, 250, 250, 0.9)',
    margin=dict(l=20, r=20, t=10, b=180),
    autosize=True
)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Streamlit
st.plotly_chart(fig, use_container_width=True, config={
    "displayModeBar": False,
    "responsive": True
})

# –õ–µ–≥–µ–Ω–¥–∞
with st.expander("‚ÑπÔ∏è –û –¥–∏–∞–≥—Ä–∞–º–º–µ"):
    st.markdown("""
    –≠—Ç–∞ –¥–∏–∞–≥—Ä–∞–º–º–∞ Sankey –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏–ª–µ–π –∂—É—Ä–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ **SJR** —Å **2022 –ø–æ 2024 –≥–æ–¥**.

    **–¶–≤–µ—Ç–æ–≤–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞:**
    - üü© **–ó–µ–ª–µ–Ω—ã–π** ‚Äî Q1 (–≤–µ—Ä—Ö–Ω–∏–π –∫–≤–∞—Ä—Ç–∏–ª—å)
    - üü® **–ñ–µ–ª—Ç—ã–π** ‚Äî Q2
    - üüß **–û—Ä–∞–Ω–∂–µ–≤—ã–π** ‚Äî Q3
    - üü• **–ö—Ä–∞—Å–Ω—ã–π** ‚Äî Q4
    - üü¶ **–°–∏–Ω–∏–π** ‚Äî –ë–µ–∑ –∫–≤–∞—Ä—Ç–∏–ª—è

    –®–∏—Ä–∏–Ω–∞ –ø–æ—Ç–æ–∫–æ–≤ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ –æ—Ç—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂—É—Ä–Ω–∞–ª–æ–≤, –ø–µ—Ä–µ—à–µ–¥—à–∏—Ö –º–µ–∂–¥—É –∫–≤–∞—Ä—Ç–∏–ª—è–º–∏.
    """)
